* {
  box-sizing: border-box;
}

body {
  font-family: Arial;
  margin: 0;
}

header {
  padding: 40px;
  text-align: center;
  background: #13293d;
  color: #fff;
}

/* 
What happens when we set the display property to flex? 
Answer: It defines the nav element as the flex container and enables the child elements within the nav to behave as flex-items.
*/
nav {
  display: flex;
  background-color: #d8a47f;
}

nav a {
  color: #13293d;
  padding: 14px 20px;
  text-decoration: none;
  text-align: center;
}

/* 
What is the flex-wrap property? 
Answer: the content would normally overflow when the screen size is too small to present all and a scroll bar would appear. When flex wrap is set the content won't overflow but will be moved to a new row instead.
*/
main {
  display: flex;
  flex-wrap: wrap;
}

aside {
  flex: 1;
  background-color: #b9c6ae;
  padding: 80px;
  text-align: center;
}

/* 
What does the flex-shrink property specify?
What is doing here? 
It defines how much the item shrinks relative to other flex items to occupy the available space. It doesn't do anything here as the footer is not placed within a flex container.
*/
footer {
  flex-shrink: 0;
  padding: 20px;
  text-align: center;
  background: #13293d;
  color: #fff;
}

/* 
What does the justify-content property do? 
It defines the flex items' alignment along the main, in this case horizontal axis.
*/
.products {
  flex: 4;
  background-color: #fff;
  padding: 20px;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
}

/* 
What is the flex property a shorthand property for?
What is it doing here? 
It is a shorthand for flex-grow, flex-shrink and flex-basis. It keeps the elements that have a .card class at a constant 400px here. 
*/
.card {
  border-style: solid;
  border-width: 1px;
  border-radius: 10px;
  padding: 10px;
  flex: 0 0 400px;
}

.card header {
  padding: 20px;
}

.card p {
  text-align: center;
}

.card img {
  width: 100%;
}

/* 
What does the flex-direction property define?
What is it doing here? 
It defines the axis along which the items will be aligned, either main or cross. Here instead of displaying the items horizontally in a row, it displays them vertically as a coloumn when the screen size is smaller than 768px.
*/
@media screen and (max-width: 768px) {
  main,
  nav {
    flex-direction: column;
  }
}
